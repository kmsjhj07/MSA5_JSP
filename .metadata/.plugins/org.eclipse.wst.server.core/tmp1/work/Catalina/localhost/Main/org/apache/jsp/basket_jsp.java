/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.100
 * Generated at: 2024-04-29 01:26:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.swing.plaf.metal.MetalBorders.Flush3DBorder;
import java.awt.geom.Path2D;
import java.util.List;
import java.sql.*;
import store.DAO.CartDAO;
import store.DTO.Cart;
import java.util.ArrayList;
import store.DTO.Cart;
import store.DAO.CartDAO;

public final class basket_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(7);
    _jspx_dependants.put("jar:file:/D:/BYJ/JSP/.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps/Main/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/sql.tld", Long.valueOf(1425946270000L));
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1712913999052L));
    _jspx_dependants.put("/layout/footer.jsp", Long.valueOf(1712913999082L));
    _jspx_dependants.put("/layout/footer2.jsp", Long.valueOf(1712913999084L));
    _jspx_dependants.put("jar:file:/D:/BYJ/JSP/.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps/Main/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
    _jspx_dependants.put("jar:file:/D:/BYJ/JSP/.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps/Main/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/fmt.tld", Long.valueOf(1425946270000L));
    _jspx_dependants.put("jar:file:/D:/BYJ/JSP/.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps/Main/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/fn.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(6);
    _jspx_imports_classes.add("store.DAO.CartDAO");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("store.DTO.Cart");
    _jspx_imports_classes.add("javax.swing.plaf.metal.MetalBorders.Flush3DBorder");
    _jspx_imports_classes.add("java.awt.geom.Path2D");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\">\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"static/css/style.css\"> \r\n");
      out.write("<title>장바구니</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");

	//세션에서 tableNum 값을 가져옵니다. 세션에 값이 없을 경우를 대비하여 기본값을 설정할 수 있습니다.
	Integer tableNumObj_basket = (Integer) request.getSession().getAttribute("tableNum");
	int tableNum1 = 0; // 기본값 설정
	
	if (tableNumObj_basket != null) {
	    tableNum1 = tableNumObj_basket.intValue(); // intValue() 메소드를 사용하여 int로 변환
	}
	
	CartDAO cartDao2 = new CartDAO();
	List<Cart> uniqueCartList = cartDao2.getUniqueCartList(tableNum1); // 중복 제거된 장바구니 목록 가져오기
	
	if(uniqueCartList.isEmpty()) {

      out.write("\r\n");
      out.write("		<!-- 배달의 민족 장바구니를 참고해서 꾸며주세요. -->	\r\n");
      out.write("      <div class=\"container\">\r\n");
      out.write("        <img alt=\"basket\" src=\"static/img/emptyBasket.jpg\" >\r\n");
      out.write("    	<a href=\"modal_menu.jsp?tableNum=");
      out.print(session.getAttribute("tableNum"));
      out.write("\">더 담으러가기</a>\r\n");
      out.write("      </div>\r\n");
		
	}
	else {


      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	// 세션에서 tableNum 값을 가져옵니다. 세션에 값이 없을 경우를 대비하여 기본값을 설정할 수 있습니다.
// 	Integer tableNumObj1 = (Integer) request.getSession().getAttribute("tableNum");
// 	int tableNum_foot1 = 0; // 기본값 설정
	
// 	if (tableNumObj1 != null) {
// 	    tableNum_foot1 = tableNumObj1.intValue(); // intValue() 메소드를 사용하여 int로 변환
// 	}

      out.write("\r\n");
      out.write("<footer class=\"footer\">\r\n");
      out.write("    <nav class=\"footer-nav\">\r\n");
      out.write("        <a href=\"info.jsp\" class=\"footer-link\">\r\n");
      out.write("            <img src=\"static/img/logo_info.png\" alt=\"Favorites\" class=\"footer-icon\">\r\n");
      out.write("            <span>사용안내</span>\r\n");
      out.write("        </a>\r\n");
      out.write("        <a href=\"modal_menu.jsp?tableNum=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ tableNum }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" class=\"footer-link\">\r\n");
      out.write("            <img src=\"static/img/home.png\" alt=\"Home\" class=\"footer-icon\">\r\n");
      out.write("            <span>홈</span>\r\n");
      out.write("        </a>\r\n");
      out.write("        <a href=\"basket.jsp?tableNum=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ tableNum }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" class=\"footer-link\">\r\n");
      out.write("            <img src=\"static/img/basket.png\" alt=\"Orders\" class=\"footer-icon\">\r\n");
      out.write("            <span>장바구니</span>\r\n");
      out.write("        </a>\r\n");
      out.write("    </nav>\r\n");
      out.write("</footer>\r\n");
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	
 	// 세션에서 tableNum 값을 가져옵니다.
    Integer tableNum6 = (Integer)session.getAttribute("tableNum");
    if (tableNum6 == null) {
        // 에러 처리 또는 기본값 할당
        tableNum6 = 1; // 예시 기본값
    }
 	
	// tableNo는 application범위로 지정해야됨.
    int tableNo = tableNum6; 
	CartDAO cartDao = new CartDAO();
	Cart cart = new Cart();
	cart = cartDao.check(tableNo);
	int amount = 0;
	int price = 0;
	
	amount = amount + cart.getAmount();
	price = price + cart.getPrice();

      out.write("\r\n");
      out.write("<footer class=\"footer2\">\r\n");
      out.write("	<!-- 주문 요약 -->\r\n");
      out.write("	<div class=\"order-summary\">\r\n");
      out.write("	    <div class=\"order-info\">\r\n");
      out.write("	        <p>수량: <span class=\"order-quantity\">    ");
      out.print( amount );
      out.write("    </span>     개</p>\r\n");
      out.write("	        <br>\r\n");
      out.write("	        <p>금액: <span class=\"order-amount\">      ");
      out.print( price );
      out.write("     </span>     원</p>\r\n");
      out.write("	    </div>\r\n");
      out.write("	    <a href=\"orders.jsp?tableNum=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ tableNum }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" class=\"order-button\">주문하기</a>\r\n");
      out.write("	</div>\r\n");
      out.write("</footer>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<div class=\"basket\">\r\n");
      out.write("	  <h1 class=\"title\">장바구니</h1>\r\n");
      out.write("	  <h2 class=\"subtitle\">");
      out.print( tableNum1 );
      out.write(" 번 테이블 주문서</h2>\r\n");
      out.write("  ");
 
      for (Cart cartItem : uniqueCartList) {
       // uniqueCartList를 반복하며 각 항목을 표시
  
      out.write("\r\n");
      out.write("	  <div class=\"menu-item\" data-tableNum=\"");
      out.print( cartItem.getTableNo());
      out.write("\">\r\n");
      out.write("	    <img src=\"");
      out.print(request.getContextPath());
      out.write('/');
      out.print( cartItem.getImagePath() );
      out.write("\" alt=\"");
      out.print( cartItem.getProductName() );
      out.write("\" />\r\n");
      out.write("	    <div class=\"menu-description\">\r\n");
      out.write("	      <h3>");
      out.print( cartItem.getProductName() );
      out.write("</h3>\r\n");
      out.write("	      <p>");
      out.print( cartItem.getAmount() );
      out.write("개</p>\r\n");
      out.write("	      <p>");
      out.print( cartItem.getPrice() );
      out.write(" 원</p>\r\n");
      out.write("	      <button class=\"quantity-decrease\" data-product-id=\"");
      out.print( cartItem.getProductName() );
      out.write("\">-</button>\r\n");
      out.write("		  <span class=\"quantity\">");
      out.print( cartItem.getAmount() );
      out.write("</span> <!-- 기본 수량 -->\r\n");
      out.write("		  <button class=\"quantity-increase\" data-product-id=\"");
      out.print( cartItem.getProductName() );
      out.write("\">+</button>\r\n");
      out.write("	    </div>\r\n");
      out.write("	  </div>\r\n");
      out.write("  ");

      }
	}
  
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("$(document).ready(function() {\r\n");
      out.write("    $('.quantity-decrease').click(function() {\r\n");
      out.write(" 		var tableNum = ");
      out.print( tableNum1 );
      out.write(";\r\n");
      out.write("        var productName = $(this).data('productId'); // 제품 이름을 가져옵니다.\r\n");
      out.write("        //console.log(productName);\r\n");
      out.write("        var quantitySpan = $(this).siblings('.quantity');\r\n");
      out.write("        var currentQuantity = parseInt(quantitySpan.text());\r\n");
      out.write("		var price = $(this).data('price')\r\n");
      out.write("		var operation = \"-\";\r\n");
      out.write("        \r\n");
      out.write("        if (currentQuantity > 0) {\r\n");
      out.write("            var newQuantity = currentQuantity - 1;\r\n");
      out.write("            quantitySpan.text(newQuantity); // 화면에 수량 업데이트\r\n");
      out.write("\r\n");
      out.write("            // AJAX 요청\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                type: \"POST\",\r\n");
      out.write("                url: \"updateQuantityServlet.jsp\", // 서버 측 업데이트 처리를 위한 URL(서블릿)\r\n");
      out.write("                data: {\r\n");
      out.write("                    tableNum: tableNum, // 테이블 번호\r\n");
      out.write("                    productName: productName, // 제품 이름\r\n");
      out.write("                    // quantity: newQuantity, // 변경된 수량\r\n");
      out.write("                	operation: operation\r\n");
      out.write("                    //price: price // 제품 별 가격\r\n");
      out.write("                },\r\n");
      out.write("                success: function(response) {\r\n");
      out.write("                    // 서버로부터 성공적인 응답을 받았을 때의 처리\r\n");
      out.write("                    alert(\"수량이 업데이트되었습니다.\");\r\n");
      out.write("                    window.location.reload(); // 현재 페이지 새로고침\r\n");
      out.write("                },\r\n");
      out.write("                error: function(xhr, status, error) {\r\n");
      out.write("                    // 에러 발생 시 처리\r\n");
      out.write("                    alert(\"수량 업데이트 중 오류가 발생했습니다.\");\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    $('.quantity-increase').click(function() {\r\n");
      out.write("    	var tableNum = ");
      out.print( tableNum1 );
      out.write("; \r\n");
      out.write("    	var productName = $(this).data('productId'); // 제품 이름을 가져옵니다.\r\n");
      out.write("    	var quantitySpan = $(this).siblings('.quantity');\r\n");
      out.write("        var currentQuantity = parseInt(quantitySpan.text());\r\n");
      out.write("        var newQuantity = currentQuantity + 1;\r\n");
      out.write("        quantitySpan.text(newQuantity);\r\n");
      out.write("		var operation = \"+\";\r\n");
      out.write("\r\n");
      out.write("        // 여기에 AJAX 요청을 추가하여 서버에 수량 변경사항 반영\r\n");
      out.write("        // AJAX 요청\r\n");
      out.write("        $.ajax({\r\n");
      out.write("            type: \"POST\",\r\n");
      out.write("            url: \"updateQuantityServlet.jsp\", // 서버 측 업데이트 처리를 위한 URL(서블릿)\r\n");
      out.write("            data: {\r\n");
      out.write("                tableNum: tableNum, // 테이블 번호\r\n");
      out.write("                productName: productName, // 제품 이름\r\n");
      out.write("                operation: operation\r\n");
      out.write("                //quantity: newQuantity, // 변경된 수량\r\n");
      out.write("                //price: price // 제품 별 가격\r\n");
      out.write("            },\r\n");
      out.write("            success: function(response) {\r\n");
      out.write("                // 서버로부터 성공적인 응답을 받았을 때의 처리\r\n");
      out.write("                alert(\"수량이 업데이트되었습니다.\");\r\n");
      out.write("                window.location.reload(); // 현재 페이지 새로고침\r\n");
      out.write("            },\r\n");
      out.write("            error: function(xhr, status, error) {\r\n");
      out.write("                // 에러 발생 시 처리\r\n");
      out.write("                alert(\"수량 업데이트 중 오류가 발생했습니다.\");\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
