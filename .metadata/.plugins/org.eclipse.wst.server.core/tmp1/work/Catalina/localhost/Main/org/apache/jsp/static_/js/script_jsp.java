/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.100
 * Generated at: 2024-04-29 01:17:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.static_.js;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class script_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("<!-- booststrap -->\r\n");
      out.write("<!-- <script src=\"< %= request.getContextPath() %>/static/js/bootstrap.bundle.min.js\"></script> -->\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- js -->\r\n");
      out.write("<!-- <script src=\"< % = request.getContextPath() %>/static/js/modal.js\"></script> JavaScript 파일 참조 -->\r\n");
      out.write("<script src=\"");
      out.print( request.getContextPath() );
      out.write("/static/js/script.jsp\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<script>\r\n");
      out.write("		\r\n");
      out.write("		// 목록에서 상품 아이템 클릭 \r\n");
      out.write("		$('.product-item').on('click', function() {\r\n");
      out.write("			$('#myModal').show()\r\n");
      out.write("			\r\n");
      out.write("			let item = $(this)\r\n");
      out.write("			let productId = item.attr(\"id\")\r\n");
      out.write("			let count = 1;\r\n");
      out.write("			// let count = item.children()[0].value\r\n");
      out.write("			let img = $( item.children()[1] ).clone()\r\n");
      out.write("			let productName = item.children()[2].textContent\r\n");
      out.write("			let price = item.data('price');\r\n");
      out.write("		    let description = item.data('description'); // data-description 속성에서 description 정보를 가져옵니다.\r\n");
      out.write("\r\n");
      out.write("			console.log( productId )\r\n");
      out.write("			console.log( count )\r\n");
      out.write("			console.log( img )\r\n");
      out.write("			console.log( productName )\r\n");
      out.write("			console.log( price )\r\n");
      out.write("			console.log(description);\r\n");
      out.write("			\r\n");
      out.write("			$('#detail-product-id').text( productId )\r\n");
      out.write("			$('#detail-img-box').html( img )\r\n");
      out.write("			$('#product-detail-name').text( productName )\r\n");
      out.write("			$('#detail-count').val( count )\r\n");
      out.write("			$('#product-detail-price').text(price)\r\n");
      out.write("		    $('#product-dsecription').text( description ); // 모달에 description 정보를 추가합니다.\r\n");
      out.write("\r\n");
      out.write("		})\r\n");
      out.write("		\r\n");
      out.write("		// 모달 내 취소하기 버튼 클릭\r\n");
      out.write("		$('#cancel').on('click', function() {\r\n");
      out.write("			$('#myModal').hide()\r\n");
      out.write("		})\r\n");
      out.write("		\r\n");
      out.write("		// 모달 내 수량(+, -) 버튼 클릭\r\n");
      out.write("		$('#detail-plus').on('click', function() {\r\n");
      out.write("	        let count = parseInt($('#detail-count').val());\r\n");
      out.write("	        count++;\r\n");
      out.write("	        $('#detail-count').val(count);\r\n");
      out.write("	        let price = parseFloat($('#product-detail-price').text());\r\n");
      out.write("	        $('#product-detail-price').text(price + parseFloat(price / (count - 1)));\r\n");
      out.write("        });\r\n");
      out.write("   \r\n");
      out.write("        $('#detail-minus').on('click', function() {\r\n");
      out.write("            let count = parseInt($('#detail-count').val());\r\n");
      out.write("            if (count > 1) {\r\n");
      out.write("                count--;\r\n");
      out.write("                $('#detail-count').val(count);\r\n");
      out.write("                let price = parseFloat($('#product-detail-price').text());\r\n");
      out.write("                $('#product-detail-price').text(price - parseFloat(price / (count + 1)));\r\n");
      out.write("            } else {\r\n");
      out.write("                // 수량 1보다 작아지면 1로 만듦\r\n");
      out.write("                $('#detail-count').val(1);\r\n");
      out.write("            }\r\n");
      out.write("         });\r\n");
      out.write("       \r\n");
      out.write("        function updateTotalPrice(count) {\r\n");
      out.write("            let price = parseFloat($('#product-detail-price').attr('data-price')); // 상품 1개당 가격\r\n");
      out.write("            let totalPrice = price * count;\r\n");
      out.write("            $('#product-detail-price').text(totalPrice.toFixed(2));\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		// 모달 바깥 클릭 \r\n");
      out.write("		$('.closeBtn').on('click', function() {\r\n");
      out.write("			$('#myModal').hide()\r\n");
      out.write("		})\r\n");
      out.write("		\r\n");
      out.write("		");
      out.write("\r\n");
      out.write("		");

			Integer tableNum = (Integer) session.getAttribute("tableNum");
			if (tableNum == null) {
			    // 세션에 tableNum 값이 없을 경우, 새로운 값을 파라미터에서 읽어와서 세션에 저장
			    String tableNumStr = request.getParameter("tableNum");
			    if (tableNumStr != null) {
			        tableNum = Integer.parseInt(tableNumStr);
			        session.setAttribute("tableNum", tableNum);
			    }
			}
		
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		// 모달 내에서 추가하기 버튼 클릭\r\n");
      out.write("		$(document).ready(function() {\r\n");
      out.write("	    	$('#confirm').click(function(event) {\r\n");
      out.write("		        event.preventDefault();\r\n");
      out.write("		        // tableNo는 application으로 등록.\r\n");
      out.write("       			let tableNo = ");
      out.print( tableNum );
      out.write(";\r\n");
      out.write("		        let productId = $('#detail-product-id').text();\r\n");
      out.write("		        let productName = $('#product-detail-name').text();\r\n");
      out.write("		        let count = $('#detail-count').val();\r\n");
      out.write("		        let price = $('#product-detail-price').text();\r\n");
      out.write("		        let data = {\r\n");
      out.write("		        	tableNo: tableNo,\r\n");
      out.write("		            productId: productId,\r\n");
      out.write("		            productName: productName,\r\n");
      out.write("		            count: count,\r\n");
      out.write("		            price: price\r\n");
      out.write("		        };\r\n");
      out.write("\r\n");
      out.write("		        $.ajax({\r\n");
      out.write("		            type: \"POST\",\r\n");
      out.write("		            url: \"addToCartServlet.jsp\", // 장바구니에 추가하는 서블릿 URL\r\n");
      out.write("		            data: data,\r\n");
      out.write("		            success: function(response) {\r\n");
      out.write("		                alert('추가가 완료되었습니다.');\r\n");
      out.write("		                \r\n");
      out.write("		                $('#myModal').hide();\r\n");
      out.write("		                window.location.reload(\"/layout/footer2.jsp\");\r\n");
      out.write("		            },\r\n");
      out.write("		            error: function(xhr, status, error) {\r\n");
      out.write("		                alert('추가 중 오류가 발생했습니다.');\r\n");
      out.write("		                console.error(xhr.status);\r\n");
      out.write("		                console.error(xhr.responseText);\r\n");
      out.write("		            }\r\n");
      out.write("		        });\r\n");
      out.write("    		});\r\n");
      out.write("		});\r\n");
      out.write("		// 웹소켓 객체 생성\r\n");
      out.write("		var socket = new WebSocket(\"ws://localhost:8080/Chat/chatting\");\r\n");
      out.write("		\r\n");
      out.write("		// 웹소켓 연결 시 호출 메소드\r\n");
      out.write("		socket.onopen = function() {\r\n");
      out.write("			console.log(\"WebSocket 연결 성공.\");\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		// 메시지 수신 시 호출 메소드\r\n");
      out.write("		socket.onmessage = function(event) {\r\n");
      out.write("			console.log(\"메시지 수신: \" + event.data);\r\n");
      out.write("			// 서버로부터 수신된 메시지 처리\r\n");
      out.write("			// 예를 들어, 수신된 메시지를 채팅 영역에 표시\r\n");
      out.write("			var chatArea = document.getElementById(\"chatArea\");\r\n");
      out.write("			chatArea.innerHTML += \"<div>\" + event.data + \"</div>\";\r\n");
      out.write("			// 채팅 영역 스크롤 맨 아래로 이동\r\n");
      out.write("			chatArea.scrollTop = chatArea.scrollHeight;\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		socket.onclose = function() {\r\n");
      out.write("			console.log(\"WebSocket 연결 종료.\");\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		// 메시지를 서버로 전송하기 위한 함수\r\n");
      out.write("		function sendMessage() {\r\n");
      out.write("			var messageInput = document.getElementById(\"messageInput\");\r\n");
      out.write("			var message = messageInput.value;\r\n");
      out.write("			var name = document.getElementById(\"name\").value;\r\n");
      out.write("			\r\n");
      out.write("			if( name == '' ) {\r\n");
      out.write("				alert('이름을 입력해주세요')\r\n");
      out.write("				return\r\n");
      out.write("			}\r\n");
      out.write("			// 메시지 전송 요청 함수 호출\r\n");
      out.write("			socket.send(name + \" : \" + message);\r\n");
      out.write("			\r\n");
      out.write("			// 메시지를 전송한 후 입력 필드를 지움\r\n");
      out.write("			messageInput.value = \"\";\r\n");
      out.write("			// 채팅 영역 스크롤 맨 아래로 이동\r\n");
      out.write("			var chatArea = document.getElementById(\"chatArea\");\r\n");
      out.write("			chatArea.scrollTop = chatArea.scrollHeight;\r\n");
      out.write("			\r\n");
      out.write("			// 엔터 키 누를 때 sendMessage 함수 호출\r\n");
      out.write("			function handleKeyPress(event) {\r\n");
      out.write("				if (event.keyCode === 13) {\r\n");
      out.write("					sendMessage();\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
