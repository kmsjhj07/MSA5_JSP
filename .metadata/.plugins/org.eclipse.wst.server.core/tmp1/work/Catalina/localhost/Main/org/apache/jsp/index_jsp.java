/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.100
 * Generated at: 2024-04-29 06:18:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"UTF-8\">\r\n");
      out.write("	<title>Insert title here</title>\r\n");
      out.write("	<script>\r\n");
      out.write("		// 웹소켓 객체 생성\r\n");
      out.write("		//var socket = new WebSocket(\"ws://localhost:9090/Main\");\r\n");
      out.write("		var socket = new WebSocket(\"ws://localhost:9090/Main/chatting\");\r\n");
      out.write("\r\n");
      out.write("		// 웹소켓 연결 시 호출 메소드\r\n");
      out.write("		socket.onopen = function() {\r\n");
      out.write("			console.log(\"WebSocket 연결 성공\");\r\n");
      out.write("		} \r\n");
      out.write("		\r\n");
      out.write("		// 메시지 수신 시 호출 메소드\r\n");
      out.write("		socket.onmessage = function(event) {\r\n");
      out.write("			console.log(\"메시지 수신: \" + event.data);\r\n");
      out.write("			// 서버로부터 수신된 메시지 처리\r\n");
      out.write("			// 예를 들어, 수신된 메시지를 채팅 영역에 표시\r\n");
      out.write("			var chatArea = document.getElementById(\"chatArea\");\r\n");
      out.write("			chatArea.innerHTML += \"<div>\" + event.data + \"</div>\";\r\n");
      out.write("			// 채팅 영역 스크롤 맨 아래로 이동\r\n");
      out.write("			chatArea.ScrollTop = chatArea.scrollHeight;\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		socket.onclose = function() {\r\n");
      out.write("			console.log(\"WebSocket 연결 종료\");\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 메시지를 서버로 전송하기 위한 함수\r\n");
      out.write("		function sendMessage() {\r\n");
      out.write("			var messageInput = document.getElementById(\"messageInput\");\r\n");
      out.write("			var message = messageInput.value;\r\n");
      out.write("			var name = document.getElementById(\"name\").value;\r\n");
      out.write("			\r\n");
      out.write("			if (name == '') {\r\n");
      out.write("				alert('이름을 입력해주세요')\r\n");
      out.write("				return\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			// 메시지 전송 요청 함수 호출\r\n");
      out.write("			socket.send(name + \" : \" + message);\r\n");
      out.write("			\r\n");
      out.write("			// 메시지를 전송한 후 입력 필드를 지움\r\n");
      out.write("			messgaeInput.value = \"\";\r\n");
      out.write("			// 채팅 영역 스크롤 맨 아래 이동\r\n");
      out.write("			var chatArea = document.getElementById(\"chatArea\");\r\n");
      out.write("			chatArea.scrollTop = chatArea.scrollHeight;\r\n");
      out.write("			\r\n");
      out.write("			// 엔터 키 누를 때, sendMessage 함수 호출\r\n");
      out.write("			function handleKeyPress(event) {\r\n");
      out.write("				if (event.KeyCode === 13) {\r\n");
      out.write("					sendMessage();\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</head>\r\n");
      out.write("	<body>\r\n");
      out.write("		<div id=\"chatArea\" style=\"height: 200px; overflow-y: scroll;\"></div>\r\n");
      out.write("		<input type=\"text\" id=\"name\" name=\"name\" placeholder=\"이름\"/> <br>\r\n");
      out.write("		<input type=\"text\" id=\"messageInput\" placeholder=\"메시지를 입력하세요.\" onkeypress=\"handleKeyPress(event)\">\r\n");
      out.write("		<button onclick=\"sendMessage()\">보내기</button>\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
